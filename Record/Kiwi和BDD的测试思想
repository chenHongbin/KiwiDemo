Ref: http://onevcat.com/2014/02/ios-test-with-kiwi/


Kiwi和BDD的测试思想
1、XCTest的问题
（1）书写性和可读性上都不好
（2）所有的测试都是由断言完成的，而很多时候断言的意义并不是特别的明确，
     对于项目交付或者新的开发人员加入时，理解或者转换成本很大
（3）难以进行mock或者stub

2、BDD
BDD提倡的是通过将测试语句转换为类似自然语言的描述，开发人员可以使用更符合大众语言的习惯来书写测试，
这样不论在项目交接、交付，或者之后自己修改时，都可以顺利很多。

一个典型的BDD的测试用例包括完整的三段式上下文，测试大多可以翻译为 Given..When..Then的格式。
在objc中，现在比较流行的BDD框架有cedar，specta和Kiwi

3、行为描述（Specs）和期望（Expectations）， Kiwi测试的基本结构
传统测试的文件名一般以Tests为后缀，表示这个文件中含有一组测试，
而在Kiwi中，一个测试文件所包含的是一组对于行为的描述（Spec）， 
因此习惯上使用需要测试的目标类来作为名字，并以Spec作为文件名后缀。


#import <Kiwi/Kiwi.h>

SPEC_BEGIN(SimpleStringSpec)
describe(@"SimpleString", ^{
	context(@"when assigned to 'Hello world' ", ^{
		NSString *greeting = @"Hello world";
		it (@"should exist", ^{
			[[gretting shouldNot] beNil];
		});

        it(@"should equal to 'Hello world'", ^{
            [[greeting should] equal:@"Hello world"];
        });
	});
});
SPEC_END

（1）、SPEC_BEGIN和SPEC_END都是宏，它们定义了一个KWSpec的子类, KWspec是XCTestCase的子类,并将其中的内容包装在一个函数中。
（2）、describe描述需要测试的对象内容
（3）、context描述测试上下文
（4）、it中的内容是测试的本体，描述这个测试需要满足的条件
以上构成了Kiwi测试中的行为描述。

Kiwi中一些其他的行为描述关键字：

beforeAll(aBlock);  -- 当前scope内部的所有的其他block运行之前调用一次
afterAll(aBlock);   -- 当前scope内部的所有的其他block运行之后调用一次

beforeEach(aBlock);  -- 在scope内的每个it之前调用一次，对于context的配置代码应该写在这里
afterEach(aBlock);   -- 在scope内的每个it之后调用一次，用于清理测试后的代码

specify(aBlock); -- 可以在里面直接书写不需要描述的测试

pending(aString, aBlock);  -- 只打印一条log信息，不做测试。这个语句会给出一个警告，可以作为一开始集中书写行为描述时还未实现的测试的提示

xit(aString, aBlock);  -- 和pending一样，另一种写法。因为在真正实现时测试时只需要将x删掉就是it，但是pending语意更明确，因此还是推荐pending

实际的测试写在it里，是由一个一个的期望（Expectations）来进行描述的，期望相当于传统测试中的断言，
要是运行的结果不能匹配期望，则测试失败。

在Kiwi中期望（Expectations）都是由should或者shouldNot开头，并紧接着一个或多个判断的链式调用，
大部分常见的是be或haveSomeCondition的形式。

可以参看文档的这个页面（https://github.com/allending/Kiwi/wiki/Expectations）。另外，您还可以通过新建KWMatcher的子类，来简单地自定义自己和项目所需要的期望语句

something important：
期望描述的should或者shouldNot是作用在对象上的宏，因此对于标量，我们需要先将其装换为对象


4、Stub（桩程序）和Mock（模拟对象）的基本概念

tip: 我们编写生产代码让它能够工作其实并不很难，项目中编码方面的工作难点往往在于框架搭建以及随着项目发展如何保持代码优雅可读可维护。
     而测试相比起业务代码的编写一般来说会更难一些，很多时候你会发现有些代码是“无法测试”的，因为代码之间存在较高的耦合程度，
     因此绕不开对于其他类的依赖，来对某个类单独测试其正确性。我们不能依赖于一个没有经过测试的类来对另一个需要测试的类进行测试


(1)、Stub 桩程序
用一种最简单的语言来“描述”那些依赖类的行为，而避免对它们进行具体实现，这样就能最大限度地避免出错。

// WeatherRecorder.m
- (void)writeResultToDatabaseWithTemprature:(NSInteger)temprature 
                                   humidity:(NSInteger)humidity
{
    id result = [self.weatherForecaster resultWithTemprature:temprature humidity:humidity];
    [self write:result];
}

Q:对于这样的方法和相应地WeatherRecorder应该如何测试呢？ 

  这个方法依赖了weatherForecaster的计算方法，而我们这里关心的更多的是write这个方法的正确性
  （算法的测试应该被分开写在对应的测试中）对于计算的细节和结果我们其实并不关心，但是这个方法本身和算法
  耦合在了一起。一个完美的解决的方案是，我们人为地指定计算的结果，然后测试数据库的写入操作。
  人为地让一个对象对某个方法返回我们事先规定好的值。这就叫Stub(桩程序)


tips: 对于Kiwi的stub, 需要注意的是它不是永久有效的，在每个it block的结尾stub都会被清空，超出范围的方法
调用将不会被stub截取到。


（2）、Mock 模拟对象
 Mock是一个非常容易和stub混淆的概念。简单来说，我们可以将mock看做是一种更全面和更智能的stub。

 a、Mock其实就是一个对象，它是对现有类的行为的一种模拟，或者对现有接口实现的模拟。
    在objc的OOP中，类或者接口就是指导对象行为的蓝图，而Mock则遵循这些蓝图并模拟他们的实例对象。
    从这方面来说，Mock与Stub最大的区别在于Stub只是简单地方法替换，而不涉及新的对象，被Stub的对象
    可以是业务代码中的真正的对象。而Mock行为本身产生新的对象，并遵循类定义相应某些方法。

 b、更智能，基础上来说，和Stub很相似，我们可以为创造的mock定义在某种输入和方法调用下的输出，更进一步，我们
    还可以为Mock设定期望（准确的说，是我们一定会为Mock设定期望，这也是Mock最常见的用例）。 
    即，我们可以为一个 mock 指定这样的期望："这个 mock 应该收到以 X 为参数的 Y 方法，并规定它的返回为 Z"。
    其中"应该收到以 X 为参数的 Y 方法"这个期望会在测试与其不符合时让你的测试失败，而“返回 Z” 这个描述行为更接近于一种 stub 的定义

（3）、参数捕获:

 有时候我们会对Mock对象的输入参数感兴趣，比如期望某个参数符合一定要求，但是对于Mock而言一般我们是通过调用别的方法来
 验证Mock是否被调用的，所以很可能无法拿到传给mock对象的参数，这种情况下我们就可以使用参数捕获来获取输入的参数。

 KWCaptureSpy *spy = [weatherForecasterMock captureArgument:@selector(resultWithTemprature:humidity:) atIndex:0];

（4）、异步测试

 异步测试是为了对后台线程的结果进行期望检验时所需要的，Kiwi可以对某个对象的未来的状况书写期望，
 并进行检验，通过将要检验的对象加上"expectFutureValue" 然后使用"shouldEventually"即可 

[[expectFutureValue(myObject) shouldEventually] beNonNil];

[[expectFutureValue(theValue(myBool)) shouldEventually] beYes];

context(@"Fetching service data", ^{
	it(@"should receive data within one second", ^{
		__block NSString *fetchedData = nil;
		[[LRRestly client] get:@"http://www.example.com" withBlock:^(LRRestlyResponse *r){
			NSLog(@"That's it! %@", [r asString]);
			fetchedData = [r asString];
		}];
		[[expectFutureValue(fetchedData) shouldEventually] beNonNil];
	});
});

其实没什么神奇的，就是生成了一个延时的验证，在一定时间间隔后再对观测的对象进行检查。
这个时间间隔默认是 1 秒，如果你需要其他的时间间隔的话，可以使用 shouldEventuallyBeforeTimingOutAfter 版本：



















